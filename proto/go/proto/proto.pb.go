// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	proto.proto

It has these top-level messages:
	Request
	Response
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Response struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "grpc.Request")
	proto.RegisterType((*Response)(nil), "grpc.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Proto service

type ProtoClient interface {
	NoStream(ctx context.Context, in *Request, opts ...grpc1.CallOption) (*Response, error)
	RequestStream(ctx context.Context, opts ...grpc1.CallOption) (Proto_RequestStreamClient, error)
	ResponseStream(ctx context.Context, in *Request, opts ...grpc1.CallOption) (Proto_ResponseStreamClient, error)
	AllStream(ctx context.Context, opts ...grpc1.CallOption) (Proto_AllStreamClient, error)
}

type protoClient struct {
	cc *grpc1.ClientConn
}

func NewProtoClient(cc *grpc1.ClientConn) ProtoClient {
	return &protoClient{cc}
}

func (c *protoClient) NoStream(ctx context.Context, in *Request, opts ...grpc1.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc1.Invoke(ctx, "/grpc.Proto/noStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoClient) RequestStream(ctx context.Context, opts ...grpc1.CallOption) (Proto_RequestStreamClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_Proto_serviceDesc.Streams[0], c.cc, "/grpc.Proto/requestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoRequestStreamClient{stream}
	return x, nil
}

type Proto_RequestStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc1.ClientStream
}

type protoRequestStreamClient struct {
	grpc1.ClientStream
}

func (x *protoRequestStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protoRequestStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protoClient) ResponseStream(ctx context.Context, in *Request, opts ...grpc1.CallOption) (Proto_ResponseStreamClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_Proto_serviceDesc.Streams[1], c.cc, "/grpc.Proto/responseStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoResponseStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Proto_ResponseStreamClient interface {
	Recv() (*Response, error)
	grpc1.ClientStream
}

type protoResponseStreamClient struct {
	grpc1.ClientStream
}

func (x *protoResponseStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protoClient) AllStream(ctx context.Context, opts ...grpc1.CallOption) (Proto_AllStreamClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_Proto_serviceDesc.Streams[2], c.cc, "/grpc.Proto/allStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoAllStreamClient{stream}
	return x, nil
}

type Proto_AllStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc1.ClientStream
}

type protoAllStreamClient struct {
	grpc1.ClientStream
}

func (x *protoAllStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protoAllStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Proto service

type ProtoServer interface {
	NoStream(context.Context, *Request) (*Response, error)
	RequestStream(Proto_RequestStreamServer) error
	ResponseStream(*Request, Proto_ResponseStreamServer) error
	AllStream(Proto_AllStreamServer) error
}

func RegisterProtoServer(s *grpc1.Server, srv ProtoServer) {
	s.RegisterService(&_Proto_serviceDesc, srv)
}

func _Proto_NoStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServer).NoStream(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Proto/NoStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServer).NoStream(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proto_RequestStream_Handler(srv interface{}, stream grpc1.ServerStream) error {
	return srv.(ProtoServer).RequestStream(&protoRequestStreamServer{stream})
}

type Proto_RequestStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc1.ServerStream
}

type protoRequestStreamServer struct {
	grpc1.ServerStream
}

func (x *protoRequestStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protoRequestStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Proto_ResponseStream_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoServer).ResponseStream(m, &protoResponseStreamServer{stream})
}

type Proto_ResponseStreamServer interface {
	Send(*Response) error
	grpc1.ServerStream
}

type protoResponseStreamServer struct {
	grpc1.ServerStream
}

func (x *protoResponseStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Proto_AllStream_Handler(srv interface{}, stream grpc1.ServerStream) error {
	return srv.(ProtoServer).AllStream(&protoAllStreamServer{stream})
}

type Proto_AllStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc1.ServerStream
}

type protoAllStreamServer struct {
	grpc1.ServerStream
}

func (x *protoAllStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protoAllStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Proto_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.Proto",
	HandlerType: (*ProtoServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "noStream",
			Handler:    _Proto_NoStream_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "requestStream",
			Handler:       _Proto_RequestStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "responseStream",
			Handler:       _Proto_ResponseStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "allStream",
			Handler:       _Proto_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto.proto",
}

func init() { proto.RegisterFile("proto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x03, 0x93, 0x42, 0x2c, 0xe9, 0x45, 0x05, 0xc9, 0x4a, 0xd2, 0x5c, 0xec, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x02, 0x5c, 0xcc, 0xb9, 0xc5, 0xe9, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x92, 0x0c, 0x17, 0x47, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71,
	0x2a, 0xa6, 0xac, 0xd1, 0x79, 0x46, 0x2e, 0xd6, 0x00, 0xb0, 0x51, 0xda, 0x5c, 0x1c, 0x79, 0xf9,
	0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x42, 0xbc, 0x7a, 0x20, 0x73, 0xf5, 0xa0, 0x86, 0x4a, 0xf1,
	0xc1, 0xb8, 0x10, 0x63, 0x94, 0x18, 0x84, 0x8c, 0xb8, 0x78, 0x8b, 0x20, 0x92, 0x44, 0xea, 0xd0,
	0x60, 0x14, 0x32, 0xe6, 0xe2, 0x2b, 0x82, 0xf2, 0x89, 0xd4, 0x64, 0xc0, 0x28, 0x64, 0xc0, 0xc5,
	0x99, 0x98, 0x93, 0x43, 0xb4, 0x25, 0x06, 0x8c, 0x4e, 0x52, 0x5c, 0xec, 0x99, 0xf9, 0x60, 0x19,
	0x27, 0x76, 0xdf, 0x4a, 0xb0, 0xdf, 0x02, 0x18, 0x17, 0x31, 0x31, 0x07, 0x85, 0xb8, 0x27, 0xb1,
	0x81, 0x43, 0xcd, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xab, 0x12, 0x53, 0x44, 0x01, 0x00,
	0x00,
}
